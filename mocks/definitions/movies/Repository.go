// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"

	movies "movies/definitions/movies"

	paginate "github.com/morkid/paginate"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddToFavorites provides a mock function with given fields: userID, movieID
func (_m *Repository) AddToFavorites(userID int, movieID int) error {
	ret := _m.Called(userID, movieID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userID, movieID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateBatch provides a mock function with given fields: _a0
func (_m *Repository) CreateBatch(_a0 *[]movies.Movie) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]movies.Movie) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx
func (_m *Repository) FindAll(ctx *gin.Context) (paginate.Page, []movies.Movie) {
	ret := _m.Called(ctx)

	var r0 paginate.Page
	if rf, ok := ret.Get(0).(func(*gin.Context) paginate.Page); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(paginate.Page)
	}

	var r1 []movies.Movie
	if rf, ok := ret.Get(1).(func(*gin.Context) []movies.Movie); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]movies.Movie)
		}
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *Repository) GetByID(id int) movies.Movie {
	ret := _m.Called(id)

	var r0 movies.Movie
	if rf, ok := ret.Get(0).(func(int) movies.Movie); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(movies.Movie)
	}

	return r0
}

// GetLastSyncedMovie provides a mock function with given fields:
func (_m *Repository) GetLastSyncedMovie() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: request
func (_m *Repository) Update(request movies.UpdateMovieRequest) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(movies.UpdateMovieRequest) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSyncStatus provides a mock function with given fields: movieName
func (_m *Repository) UpdateSyncStatus(movieName string) error {
	ret := _m.Called(movieName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(movieName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
